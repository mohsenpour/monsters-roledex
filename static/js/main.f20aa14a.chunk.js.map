{"version":3,"sources":["components/card/card.jsx","components/cardList/cardList.jsx","components/searchBox/searchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","state","filteredMonsters","this","setState","monsters","prevProps","map","key","Component","SearchBox","onChange","type","placeholder","App","searchField","handleChange","e","target","value","filter","toLowerCase","includes","filterMonsters","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAaeA,G,kBAVF,SAACC,GACZ,OACE,yBAAKC,UAAU,iBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCqBTC,E,4MAxBbC,MAAQ,CAAEC,iBAAkB,I,kEAE1BC,KAAKC,SAAS,CAAEF,iBAAkBC,KAAKX,MAAMa,a,yCAG5BC,GACbA,IAAcH,KAAKX,OACrBW,KAAKC,SAAS,CAAEF,iBAAkBC,KAAKX,MAAMa,a,+BAM/C,OACE,yBAAKZ,UAAU,YAEXU,KAAKF,MAAMC,iBAAiBK,KAAI,SAAAX,GAC9B,OAAO,kBAAC,EAAD,CAAMY,IAAKZ,EAAQE,KAAMF,QAASA,Y,GAlB9Ba,aCeRC,G,6KAbX,OACE,6BACE,2BACEjB,UAAU,SACVkB,SAAUR,KAAKX,MAAMmB,SACrBC,KAAK,SACLC,YAAY,yB,GATEJ,cC+CTK,E,4MA3Cbb,MAAQ,CACNI,SAAU,CACR,CAAEP,KAAM,eAAgBD,GAAI,EAAGE,MAAO,WACtC,CAAED,KAAM,UAAWD,GAAI,EAAGE,MAAO,WACjC,CAAED,KAAM,SAAUD,GAAI,EAAGE,MAAO,WAChC,CAAED,KAAM,UAAWD,GAAI,EAAGE,MAAO,WACjC,CAAED,KAAM,WAAYD,GAAI,EAAGE,MAAO,WAClC,CAAED,KAAM,QAASD,GAAI,EAAGE,MAAO,WAC/B,CAAED,KAAM,QAASD,GAAI,EAAGE,MAAO,WAC/B,CAAED,KAAM,SAAUD,GAAI,EAAGE,MAAO,WAChC,CAAED,KAAM,WAAYD,GAAI,EAAGE,MAAO,YAEpCgB,YAAa,I,EAGfC,aAAe,SAACC,GACd,EAAKb,SAAS,CAAEW,YAAaE,EAAEC,OAAOC,S,+DAGtB,IAAD,EACmBhB,KAAKF,MAA/BI,EADO,EACPA,SAAUU,EADH,EACGA,YAIlB,OAHyBV,EAASe,QAChC,SAAAxB,GAAO,OAAIA,EAAQE,KAAKuB,cAAcC,SAASP,EAAYM,oB,+BAM7D,IAAMnB,EAAmBC,KAAKoB,iBAC9B,OACE,yBAAK9B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWkB,SAAUR,KAAKa,eAC1B,kBAAC,EAAD,CAAUX,SAAUH,S,GAlCVO,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f20aa14a.chunk.js","sourcesContent":["import React from 'react'\nimport './card.css'\n\nconst Card = (props) => {\n  return (\n    <div className='cardContainer'>\n      <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div >\n  )\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './cardList.css'\nimport Card from '../card/card';\n\nclass CardList extends Component {\n  state = { filteredMonsters: [] }\n  componentDidMount() {\n    this.setState({ filteredMonsters: this.props.monsters })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({ filteredMonsters: this.props.monsters })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"cardList\">\n        {\n          this.state.filteredMonsters.map(monster => {\n            return <Card key={monster.name} monster={monster}></Card>;\n          })}\n      </div>\n    )\n  }\n}\n\nexport default CardList;\n\n","import React, { Component } from 'react'\nimport './searchBox.css'\n\nclass SearchBox extends Component {\n\n  render() {\n    return (\n      <div>\n        <input\n          className=\"search\"\n          onChange={this.props.onChange}\n          type=\"search\"\n          placeholder=\"Search Monsters\"\n        />\n      </div>\n    )\n  }\n}\n\nexport default SearchBox\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/cardList/cardList';\nimport SearchBox from './components/searchBox/searchBox';\n\n\nclass App extends Component {\n  state = {\n    monsters: [\n      { name: 'Frankenstein', id: 1, email: \"a@a.com\" },\n      { name: 'Dracula', id: 2, email: \"a@a.com\" },\n      { name: 'Zombie', id: 3, email: \"a@a.com\" },\n      { name: 'Mermaid', id: 4, email: \"a@a.com\" },\n      { name: 'Godzilla', id: 5, email: \"a@a.com\" },\n      { name: 'Alien', id: 6, email: \"a@a.com\" },\n      { name: 'Mummy', id: 7, email: \"a@a.com\" },\n      { name: 'Blobby', id: 8, email: \"a@a.com\" },\n      { name: 'WareWolf', id: 9, email: \"a@a.com\" },\n    ],\n    searchField: \"\"\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  filterMonsters() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return filteredMonsters;\n  }\n\n  render() {\n    const filteredMonsters = this.filterMonsters();\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roledex</h1>\n        <SearchBox onChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    )\n\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}